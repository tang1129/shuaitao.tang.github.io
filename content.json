{"meta":{"title":"夏了夏天","subtitle":"","description":"","author":"shuaitao.tang","url":"https://tang1129.github.io","root":"/"},"pages":[],"posts":[{"title":"linux下软链接和硬链接的区别","slug":"linux下软链接和硬链接的区别","date":"2020-08-11T09:26:40.000Z","updated":"2020-08-11T09:57:22.657Z","comments":true,"path":"2020/08/11/linux下软链接和硬链接的区别/","link":"","permalink":"https://tang1129.github.io/2020/08/11/linux%E4%B8%8B%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"","text":"在 Linux 系统中，一切都是文件，然而为了区分不同类型的事物，我们有了：• 普通文件• 目录文件• 链接文件• 设备文件 文件描述符（file descriptor） 是内核为了高效管理已被打开的文件所创建的索引，其值是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行 I/O 操作的系统调用都通过文件描述符。 对于 Linux 有一些使用的用户来说，会有类似如下的写法： 1g++ lots_of_errors 2&gt;&amp;1 | head 其中 2&gt;&amp;1 中的2 就是表示的「标准错误」，1 就是「标准输出」，中间的 &amp; 表示后面跟的数字是文件描述符而不是一个文件（不然所有的「标准错误」就都重定向到了一个名为 1 的文件中了）。本文将针对另一个面试重点进行展开阐述：说说看 Linux 下有哪几种链接？软链接和硬链接？它们之间的区别是什么呢？ Linux 下的链接作为的一个 Linux 的使用者，Linux 系统下提供 ln 指令来进行文件链接，我们一定见过类似如下指令： 1ln -s bar.txt foo.txt 此时如果 ls 查看当前目录下的文件的话，会发现： 1234➜ lltotal 1.2M-rw-rw-r--. 1 Nova Nova 0 Aug 11 14:43 bar.txtlrwxrwxrwx. 1 Nova Nova 7 Aug 11 14:43 foo.txt -&gt; bar.txt 那么这个foo.txt究竟是什么呢？这个就是一个文件链接，文件链接主要分为硬链接和软链接，通过查看ln –help，可以看到一些重要的内容： 12345➜ Desktop ln --help Usage: ln [OPTION]... [-T] TARGET LINK_NAME Create hard links by default, symbolic links with --symbolic. Mandatory arguments to long options are mandatory for short options too. -s, --symbolic make symbolic links instead of hard links ln 指令默认创建的是硬链接，如果加入了-s参数，则会生成一个软链接。 硬链接​先来看看 ln 默认创建的硬链接，由于 Linux 下的文件是通过索引节点（Inode）来识别文件，在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号 (Inode Number)。 在 Linux 中，多个文件名指向同一索引节点是存在的，所以硬连接指通过索引节点来进行的连接，即每一个硬链接都是一个指向对应区域的文件。我们这里创建一个文件foo.txt然后建立一个它的硬链接看看： 12345678➜ vim foo.txt ➜ cat foo.txt LeetCode➜ ln foo.txt bar.txt # 这一步是用来创建硬链接➜ ls -litotal 65526817859 -rw-rw-r--. 2 Nova Nova 9 Sep 19 15:59 bar.txt6817859 -rw-rw-r--. 2 Nova Nova 9 Sep 19 15:59 foo.txt 前面的6817859是文件的 inode，可以简单把它想成 C 语言中的指针，它指向了物理硬盘的一个区块，事实上文件系统会维护一个引用计数，只要有文件指向这个区块，它就不会从硬盘上消失，这里我们会发现，这两个文件拥有相同的 inode，通过查看文件内容也会发现是同一个文件： 12➜ cat bar.txt LeetCode 硬链接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬链接到重要文件,以防止“误删”的功能，由于对应该目录的索引节点有一个以上的连接，假设我们删除了原始的foo.txt文件： 123➜ rm -f foo.txt ➜ cat bar.txt LeetCode 此时文件的内容依然存在，所以只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个链接被删除后，文件的数据块及目录的连接才会被释放，也就是说，文件才会被真正删除 软链接 软链接又叫符号链接，这个文件包含了另一个文件的路径名，例如在上图中，foo.txt 就是 bar.txt 的软连接，bar.txt 是实际的文件，foo.txt包含的是对于 bar.txt 的 inode 的记录。软连接可以是任意文件或目录，可以链接不同文件系统的文件，在对符号文件进行读或写操作的时候，系统会自动把该操作转换为对源文件的操作，但删除链接文件时，系统仅仅删除链接文件，而不删除源文件本身，这一点类似于 Windows 操作系统下的快捷方式。 软链接和硬链接的区别在有了上面的知识后我们就可以简要地回答面试中的问题了：软链接和硬链接的区别是什么？我们来总结一下：","categories":[],"tags":[{"name":"linux 软链接 硬链接","slug":"linux-软链接-硬链接","permalink":"https://tang1129.github.io/tags/linux-%E8%BD%AF%E9%93%BE%E6%8E%A5-%E7%A1%AC%E9%93%BE%E6%8E%A5/"}]},{"title":"深度解读C/C++指针与数组","slug":"深度解读C-C-指针与数组","date":"2020-04-08T15:31:26.000Z","updated":"2020-08-11T09:32:02.580Z","comments":true,"path":"2020/04/08/深度解读C-C-指针与数组/","link":"","permalink":"https://tang1129.github.io/2020/04/08/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBC-C-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/","excerpt":"指针和数组是密切相关的。事实上，指针和数组在很多情况下是可以互换的。例如，一个指向数组开头的指针，可以通过使用指针的算术运算或数组索引来访问数组。今天我们就来聊一聊数组和指针千丝万缕的关系。","text":"指针和数组是密切相关的。事实上，指针和数组在很多情况下是可以互换的。例如，一个指向数组开头的指针，可以通过使用指针的算术运算或数组索引来访问数组。今天我们就来聊一聊数组和指针千丝万缕的关系。 一维数组与指针指针可以用来访问数组，也可以用来改变数组成员，这点与数组本身的下标运算符功能并无区别，请看下面程序演示： 12345678910111213int arr[4] &#x3D; &#123;520,1314,521,3344&#125;;int* p &#x3D; NULL ;p &#x3D; arr ;for (int i &#x3D; 0; i &lt; 4; i++)&#123; cout&lt;&lt;*（p+i）&lt;&lt;endl;&#125; 运行结果我们会发现，两个循环打印出来的结果是一样的，这是为什么呢？现在我们一起来探讨一下：首先我们需要知道两个常识： 第一个：数组在内存中存储各元素是物理相连的； 第二个：数组的数组名（在此例中就是arr）代表的就是该数组在内存中的首地址； 我们可以打印arr看一下：cout&lt; 当然你也可以将p指向arr的任何一个元素，比如arr[1]，那么p+1就是指向的arr的第三个元素了，这个大家需要注意；指针和数组能这样互用主要是因为数组的存储是物理连续的，否则是不行的，想链表这种结构就不行； 二维数组与指针同样，二维数组与简单的一维数组类似，只不过，二维数组跟我们见过的矩阵类似。同样数组名也是整块连续内存的首地址，那么指针域二维数组怎么互用呢？我们一起来探究一下:我们看这样几行代码： 12int arr[2][2] &#x3D; &#123;&#123;520,1314&#125;,&#123;521,3344&#125;&#125;; cout&lt;&lt;arr[0]&lt;&lt;arr[1] 运行出来arr[0]和arr[1]都是地址，我们再来看一下存储示意图 原来的一维数组变为二维后，arr[0]，和arr[1]又分别是一个一维数组了，那么arr[0]，和arr[1]就分别是一维数组名了，也即分别表示各自代表的数组的首地址；这就像我们excel中的行一样。不信我们取第一行第二个元素打印看一下就是。 好，明白了这个之后，我们看怎么用指针来表示二维数组呢？还是一样，数组名就是数组的首地址；也即是arr[0][0]的地址。 通过上图我们知道：即使是二维数组，他在物理上还是连续的，只不过我们为了人好看，好理解习惯把它化成方阵，更加直观。所以可以直接将p指向首地址，然后一直讲指针往后移动就可以获取所有元素了。","categories":[],"tags":[{"name":"C 指针 数组","slug":"C-指针-数组","permalink":"https://tang1129.github.io/tags/C-%E6%8C%87%E9%92%88-%E6%95%B0%E7%BB%84/"}]},{"title":"网络基础","slug":"网络基础","date":"2020-04-08T09:51:38.000Z","updated":"2020-08-11T09:31:47.521Z","comments":true,"path":"2020/04/08/网络基础/","link":"","permalink":"https://tang1129.github.io/2020/04/08/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/","excerpt":"OSI参考模型与TCP/IP参考模型","text":"OSI参考模型与TCP/IP参考模型 物理层: 指的是电信号的传递方式，比如现在以太网通用的网线链路层：负责网卡设备的驱动、帧同步（就是说从网线上检测到什么信号算作新帧的开始）、冲突检测（如果检测到冲突就自动重发）、数据差错校验等工作。网络层：负责点到点的传输（这里的“点”指主机或路由器），Internet上的主机通过IP地址来标识，IP协议是构成Internet的基础。传输层：负责端到端的传输（这里的“端”指源主机和目的主机）。传输层可选择TCP或UDP协议。会话层： 解决传输层有一个发送方多个接收方时确定发给谁的问题表示层：解决会话层仅仅是文字的交互，提供多种数据格式的显示功能（编码）应用层：将表示层封装，提供用户接口 什么是协议？双方“约定”好的，按照一定格式传输固定数据 数据包封装应用层数据通过协议栈发到网络上时，每层协议都要加上一个数据首部，称为封装不同的协议层对数据包有不同的称谓，在传输层叫做段，在网络层叫做数据包，在链路层叫做帧 TCP/IP协议族大致可分为三部分 internet协议(IP) 传输控制协议(TCP)和用户数据报协议(UDP) TCP/UDP之上的一组协议，专门开发应用程序，如http、smtp、dns、rtp 传输层协议-TCP传输控制协议(TCP)，一种可靠的面向连接的传输层服务. “三次握手”：类似生活中打电话。 简单理解：客户端：我要对你讲话，你能听到吗；服务端：我能听到；而且我也要对你讲话，你能听到吗；客户端：我也能听到。 ………互相开始通话……… “四次挥手”： 简单理解：客户端：我说完了，我要闭嘴了；服务端：我收到请求，我要闭耳朵了；（客户端收到这个确认，于是安心地闭嘴了。）…….服务端还没倾诉完自己的故事，于是继续唠唠叨叨向客户端说了半天，直到说完为止…….服务端：我说完了，我也要闭嘴了；客户端：我收到请求，我要闭耳朵了；（事实上，客户端为了保证这个确认包成功送达，等待了两个最大报文生命周期后，才闭上耳朵。）（服务端收到这个确认，于是安心地闭嘴了。） 传输层协议-UDP用户数据报文协议（UDP），UDP 提供不可靠的非连接型传输层服务。使用UDP时，不需要建立连接，也不跟踪这些参数，开销小，空间和时间上都具有优势。只需要知道对方的IP地址和端口号，就可以直接发送数据包。但是，能不能到达就不知道了。不可靠，但是传输速度快简单理解：类似生活中邮箱，把信件扔到邮箱中，至于有没有人去看它，没有人在乎。 TCP/IP通讯过程","categories":[],"tags":[{"name":"TCP/IP 网络通信","slug":"TCP-IP-网络通信","permalink":"https://tang1129.github.io/tags/TCP-IP-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"}]}],"categories":[],"tags":[{"name":"linux 软链接 硬链接","slug":"linux-软链接-硬链接","permalink":"https://tang1129.github.io/tags/linux-%E8%BD%AF%E9%93%BE%E6%8E%A5-%E7%A1%AC%E9%93%BE%E6%8E%A5/"},{"name":"C 指针 数组","slug":"C-指针-数组","permalink":"https://tang1129.github.io/tags/C-%E6%8C%87%E9%92%88-%E6%95%B0%E7%BB%84/"},{"name":"TCP/IP 网络通信","slug":"TCP-IP-网络通信","permalink":"https://tang1129.github.io/tags/TCP-IP-%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"}]}