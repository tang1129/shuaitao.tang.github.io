{"meta":{"title":"夏了夏天","subtitle":"","description":"","author":"shuaitao.tang","url":"https://tang1129.github.io","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-08-09T15:41:40.058Z","updated":"2020-08-08T10:00:03.853Z","comments":true,"path":"2020/08/09/hello-world/","link":"","permalink":"https://tang1129.github.io/2020/08/09/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new \"My New Post123\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy I am tring to learn this… More info: Deployment","categories":[],"tags":[]},{"title":"深度解读C/C++指针与数组","slug":"深度解读C-C-指针与数组","date":"2020-08-08T15:31:26.000Z","updated":"2020-08-08T15:36:50.872Z","comments":true,"path":"2020/08/08/深度解读C-C-指针与数组/","link":"","permalink":"https://tang1129.github.io/2020/08/08/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BBC-C-%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/","excerpt":"指针和数组是密切相关的。事实上，指针和数组在很多情况下是可以互换的。例如，一个指向数组开头的指针，可以通过使用指针的算术运算或数组索引来访问数组。今天我们就来聊一聊数组和指针千丝万缕的关系。","text":"指针和数组是密切相关的。事实上，指针和数组在很多情况下是可以互换的。例如，一个指向数组开头的指针，可以通过使用指针的算术运算或数组索引来访问数组。今天我们就来聊一聊数组和指针千丝万缕的关系。 一维数组与指针 指针可以用来访问数组，也可以用来改变数组成员，这点与数组本身的下标运算符功能并无区别，请看下面程序演示： int arr[4] = {520,1314,521,3344}; int* p = NULL ; p = arr ; for (int i = 0; i &lt; 4; i++) { cout&lt;&lt;*（p+i）&lt;&lt;endl; } 运行结果我们会发现，两个循环打印出来的结果是一样的，这是为什么呢？现在我们一起来探讨一下：首先我们需要知道两个常识： 第一个：数组在内存中存储各元素是物理相连的； 第二个：数组的数组名（在此例中就是arr）代表的就是该数组在内存中的首地址； 我们可以打印arr看一下：cout&lt; 当然你也可以将p指向arr的任何一个元素，比如arr[1]，那么p+1就是指向的arr的第三个元素了，这个大家需要注意；指针和数组能这样互用主要是因为数组的存储是物理连续的，否则是不行的，想链表这种结构就不行；","categories":[],"tags":[]},{"title":"网络基础","slug":"网络基础","date":"2020-08-08T09:51:38.000Z","updated":"2020-08-11T08:22:51.993Z","comments":true,"path":"2020/08/08/网络基础/","link":"","permalink":"https://tang1129.github.io/2020/08/08/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/","excerpt":"OSI参考模型与TCP/IP参考模型","text":"OSI参考模型与TCP/IP参考模型 物理层: 指的是电信号的传递方式，比如现在以太网通用的网线链路层：负责网卡设备的驱动、帧同步（就是说从网线上检测到什么信号算作新帧的开始）、冲突检测（如果检测到冲突就自动重发）、数据差错校验等工作。网络层：负责点到点的传输（这里的“点”指主机或路由器），Internet上的主机通过IP地址来标识，IP协议是构成Internet的基础。传输层：负责端到端的传输（这里的“端”指源主机和目的主机）。传输层可选择TCP或UDP协议。会话层： 解决传输层有一个发送方多个接收方时确定发给谁的问题表示层：解决会话层仅仅是文字的交互，提供多种数据格式的显示功能（编码）应用层：将表示层封装，提供用户接口 什么是协议？双方“约定”好的，按照一定格式传输固定数据 数据包封装应用层数据通过协议栈发到网络上时，每层协议都要加上一个数据首部，称为封装不同的协议层对数据包有不同的称谓，在传输层叫做段，在网络层叫做数据包，在链路层叫做帧 TCP/IP协议族大致可分为三部分 internet协议(IP) 传输控制协议(TCP)和用户数据报协议(UDP) TCP/UDP之上的一组协议，专门开发应用程序，如http、smtp、dns、rtp 传输层协议-TCP传输控制协议(TCP)，一种可靠的面向连接的传输层服务. “三次握手”：类似生活中打电话。 简单理解：客户端：我要对你讲话，你能听到吗；服务端：我能听到；而且我也要对你讲话，你能听到吗；客户端：我也能听到。 ………互相开始通话……… “四次挥手”： 简单理解：客户端：我说完了，我要闭嘴了；服务端：我收到请求，我要闭耳朵了；（客户端收到这个确认，于是安心地闭嘴了。）…….服务端还没倾诉完自己的故事，于是继续唠唠叨叨向客户端说了半天，直到说完为止…….服务端：我说完了，我也要闭嘴了；客户端：我收到请求，我要闭耳朵了；（事实上，客户端为了保证这个确认包成功送达，等待了两个最大报文生命周期后，才闭上耳朵。）（服务端收到这个确认，于是安心地闭嘴了。） 传输层协议-UDP用户数据报文协议（UDP），UDP 提供不可靠的非连接型传输层服务。使用UDP时，不需要建立连接，也不跟踪这些参数，开销小，空间和时间上都具有优势。只需要知道对方的IP地址和端口号，就可以直接发送数据包。但是，能不能到达就不知道了。不可靠，但是传输速度快简单理解：类似生活中邮箱，把信件扔到邮箱中，至于有没有人去看它，没有人在乎。 TCP/IP通讯过程","categories":[],"tags":[]}],"categories":[],"tags":[]}